name: Rust

on:
  push:
    # branches: [ master ]
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: cargo install cargo-packager --locked

      - name: Add x86_64 target
        run: rustup target add x86_64-apple-darwin

      - name: Setup macOS Keychain for Signing
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app.keychain
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
          security create-keychain -p "${{ secrets.GITHUB_TOKEN }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.GITHUB_TOKEN }}" $KEYCHAIN_PATH
          security import certificate.p12 -k $KEYCHAIN_PATH -P "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" -A
          security list-keychains -d user -s $KEYCHAIN_PATH

      - name: build aarch64
        run: cargo build --release

      - name: build x86_64
        run: cargo build --target x86_64-apple-darwin --release

      - name: Bundle for aarch64
        run: cargo packager --release

      - name: Bundle for x86_64
        run: cargo packager --target x86_64-apple-darwin --release

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # provided by Actions, do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: true # set to true if you want the release to be a pre-release

      - name: Read version from Cargo.toml
        id: package_version
        run: |
          # 从 Cargo.toml 中提取 version = "x.y.z" 这一行，并抽取出版本号
          VERSION=$(grep '^version =' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Sign DMG files for Updater
        run: |
          VERSION=${{ steps.package_version.outputs.version }}
          # 定义两个架构的 DMG 文件路径
          DMG_AARCH64="./target/release/MessAuto_${VERSION}_aarch64.dmg"
          DMG_X86_64="./target/x86_64-apple-darwin/release/MessAuto_${VERSION}_x64.dmg"

          echo "Signing AARCH64 DMG..."
          cargo packager signer sign \
            --private-key ${{ secrets.UPDATER_PRIVATE_KEY }} \
            --password ${{ secrets.UPDATER_KEY_PASSWORD }} \
            "$DMG_AARCH64"

          echo "Signing X86_64 DMG..."
          cargo packager signer sign \
            --private-key ${{ secrets.UPDATER_PRIVATE_KEY }} \
            --password ${{ secrets.UPDATER_KEY_PASSWORD }} \
            "$DMG_X86_64"

      - name: Create Update Manifests (update.json)
        run: |
          VERSION=${{ steps.package_version.outputs.version }}
          DMG_AARCH64="./target/release/MessAuto_${VERSION}_aarch64.dmg"
          DMG_X86_64="./target/x86_64-apple-darwin/release/MessAuto_${VERSION}_x64.dmg"

          # 为 aarch64 生成 update.json
          SIGNATURE_AARCH64=$(cat "${DMG_AARCH64}.sig")
          echo '{
            "version": "${{ github.ref_name }}",
            "pub_date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "url": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/MessAuto_${VERSION}_aarch64.dmg",
            "signature": "'$SIGNATURE_AARCH64'",
            "format": "app"
          }' > ./update-aarch64.json

          # 为 x86_64 生成 update.json
          SIGNATURE_X86_64=$(cat "${DMG_X86_64}.sig")
          echo '{
            "version": "${{ github.ref_name }}",
            "pub_date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "url": "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/MessAuto_${VERSION}_x64.dmg",
            "signature": "'$SIGNATURE_X86_64'",
            "format": "app"
          }' > ./update-x86_64.json

      - name: Upload Release Assets
        run: |
          VERSION=${{ steps.package_version.outputs.version }}
          gh release upload ${{ github.ref_name }} \
            ./target/release/MessAuto_${VERSION}_aarch64.dmg \
            ./target/x86_64-apple-darwin/release/MessAuto_${VERSION}_x64.dmg \
            ./update-aarch64.json \
            ./update-x86_64.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
